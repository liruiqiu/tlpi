向量是一个有向线段 两个重要的属性是 长度（也称为大小或模）和 方向

http://www.8cmd.com/thread-24140-1-1.html


www.wordware.com/files/dx9


Texture 纹理
VB  顶点结构
Mesh 
PhyObj 物理对象
UI  能看到的每个页面
Sound	声音有位置

COM --> 控制面板\所有控制面板项\管理工具


#pragma comment(lib, "D3d9.lib");
#pragma comment(lib, "D3dx9.lib");

北京市 海淀区中关村南大街 甲10号银海大厦南区410-418


20110315

尚观-01C语言概述-01C语言概念、发展历史、特点l


YCFHQ-9DWCY-DKV88-T2TMH-G7BHP  VS2010 SN

跟他一起，觉得他永远不会背叛你  
心思细腻  
是那种有100愿意为你花80的人  
不论什么时候第一个想到的都是你  
他会想进一切办法达到我想要的  
他可以陪我逛街一天都不说累  
会在某一瞬间让你感动  
他人挺好的  

0x02c87da0


1.定义 结构体

3.怎么样设置一个材质和光

不管你开起哪种渲染状态一定要渲染完恢复现场

// DirectDemo.cpp : 定义应用程序的入口点。
//

#include "stdafx.h"
#include "DirectDemo.h"
#include <d3d9.h>
#include <D3dx9core.h>
#include <Dwrite.h>
#include <MMSystem.h>
#include <stdio.h>

#pragma  comment(lib,"winmm.lib");
#pragma comment(lib, "D3d9.lib");
#pragma comment(lib, "D3dx9.lib");

#define MAX_LOADSTRING 100

// 全局变量:
HINSTANCE hInst;								// 当前实例
TCHAR szTitle[MAX_LOADSTRING];					// 标题栏文本
TCHAR szWindowClass[MAX_LOADSTRING];			// 主窗口类名

LPDIRECT3DDEVICE9 g_d3dDevice;
float	gFPS=0.0f;
float   gMainTime=0;
int		gRendCount=1;

LPD3DXFONT gFont=NULL;		
LPD3DXSPRITE gSprite=NULL;
LPDIRECT3DTEXTURE9 gText=NULL;
LPD3DXFONT gFont24=NULL;
LPD3DXFONT gFont18=NULL;
LPD3DXSPRITE gSpriteVersion=NULL;

HWND hWnd;

// 此代码模块中包含的函数的前向声明:
ATOM				MyRegisterClass(HINSTANCE hInstance);
BOOL				InitInstance(HINSTANCE, int);
LRESULT CALLBACK	WndProc(HWND, UINT, WPARAM, LPARAM);
INT_PTR CALLBACK	About(HWND, UINT, WPARAM, LPARAM);

void		Render(float fPass);
void        RenderMain(float fPass);
void		DrawMyVersion(int w);
void		RenderDyTraceOfMaths(float fPass);

bool InitD3D(HWND hwnd)
{
	LPDIRECT3D9 d3d9 = 0;
	d3d9 = Direct3DCreate9(D3D_SDK_VERSION);
	if(!d3d9)
	{
		MessageBox(NULL, "Direct3DCreate9 -- FAILE", NULL, NULL);
		return false;
	}

	D3DPRESENT_PARAMETERS d3dpp;
	d3dpp.AutoDepthStencilFormat = D3DFMT_D24S8;
	d3dpp.BackBufferCount = 1;
	d3dpp.BackBufferFormat = D3DFMT_A8R8G8B8;
	d3dpp.BackBufferHeight = 600;
	d3dpp.BackBufferWidth = 800;
	d3dpp.MultiSampleType = D3DMULTISAMPLE_NONE;
	d3dpp.MultiSampleQuality = 0;
	d3dpp.EnableAutoDepthStencil = true;
	d3dpp.Flags = 0;
	d3dpp.SwapEffect = D3DSWAPEFFECT_COPY;
	d3dpp.FullScreen_RefreshRateInHz = D3DPRESENT_RATE_DEFAULT;
	d3dpp.hDeviceWindow = hwnd;
	d3dpp.PresentationInterval = D3DPRESENT_INTERVAL_IMMEDIATE;//D3DPRESENT_INTERVAL_IMMEDIATE;
	d3dpp.Windowed = true;

	if(FAILED(d3d9->CreateDevice(D3DADAPTER_DEFAULT, D3DDEVTYPE_HAL , hwnd, D3DCREATE_HARDWARE_VERTEXPROCESSING, &d3dpp, &g_d3dDevice)))
	{
		MessageBox(NULL, "CreateDevice -- FAILE", NULL, NULL);
		return false;
	}

	D3DXCreateSprite(g_d3dDevice,&gSprite);

	D3DXCreateFontA(g_d3dDevice,
		24,0,2,1,
		false,
		ANSI_CHARSET,
		OUT_DEFAULT_PRECIS,//OUT_SCREEN_OUTLINE_PRECIS,
		DEFAULT_QUALITY,//CLEARTYPE_QUALITY,
		0,
		"Arial",
		&gFont);
	D3DXCreateFontA(g_d3dDevice,
		24,0,2,1,
		false,
		GB2312_CHARSET,
		OUT_DEFAULT_PRECIS,//OUT_SCREEN_OUTLINE_PRECIS,
		DEFAULT_QUALITY,//CLEARTYPE_QUALITY,
		0,
		"宋体",
		&gFont24);
	
	D3DXCreateFontA(g_d3dDevice,
		18,0,2,1,
		false,
		GB2312_CHARSET,
		OUT_DEFAULT_PRECIS,//OUT_SCREEN_OUTLINE_PRECIS,
		DEFAULT_QUALITY,//CLEARTYPE_QUALITY,
		0,
		"宋体",
		&gFont18);
	
	//Hr=D3DXCreateTextureFromFile(g_d3dDevice,"001.jpg",&pText);
	/*D3DXCreateTextureFromFileEx(g_d3dDevice,"001.jpg",
						0,0,
						4,
						D3DUSAGE_DYNAMIC,
						D3DFMT_A8R8G8B8,
						D3DPOOL_DEFAULT,
				        D3DX_FILTER_BOX,
						D3DX_FILTER_BOX,
						NULL,NULL,NULL,
						&gText);*/

	return true;
	
}

int APIENTRY _tWinMain(HINSTANCE hInstance,
                     HINSTANCE hPrevInstance,
                     LPTSTR    lpCmdLine,
                     int       nCmdShow)
{
	UNREFERENCED_PARAMETER(hPrevInstance);
	UNREFERENCED_PARAMETER(lpCmdLine);

 	// TODO: 在此放置代码。
	MSG msg;
	HACCEL hAccelTable;

	// 初始化全局字符串
	LoadString(hInstance, IDS_APP_TITLE, szTitle, MAX_LOADSTRING);
	LoadString(hInstance, IDC_DIRECTDEMO, szWindowClass, MAX_LOADSTRING);
	MyRegisterClass(hInstance);

	// 执行应用程序初始化:
	if (!InitInstance (hInstance, nCmdShow))
	{
		return FALSE;
	}

	hAccelTable = LoadAccelerators(hInstance, MAKEINTRESOURCE(IDC_DIRECTDEMO));

	bool b = InitD3D(hWnd);
	if(!b)
	{

		return 0;
	}
	DWORD dwLastTime=0,dwPass=0;
	PeekMessage(&msg,NULL,NULL,NULL,NULL);
	// 主消息循环:
	while (msg.message != WM_QUIT)
	{
		if (PeekMessage(&msg, 0,0,0, PM_REMOVE))
		{
			TranslateMessage(&msg);
			DispatchMessage(&msg);
		}
		else
		{
			if(++gRendCount>399)
			{
				DWORD dwTime=timeGetTime();
				dwPass=dwTime-dwLastTime;
				if (dwPass<=1)
				{
					dwPass=1;
				}
				dwLastTime=dwTime;

				gFPS=1000.0f/(dwPass/400.0f);	
				gRendCount=1;

		
			}
		Render(dwPass/400.0f);
		}
	}

	return (int) msg.wParam;
}



//
//  函数: MyRegisterClass()
//
//  目的: 注册窗口类。
//
//  注释:
//
//    仅当希望
//    此代码与添加到 Windows 95 中的“RegisterClassEx”
//    函数之前的 Win32 系统兼容时，才需要此函数及其用法。调用此函数十分重要，
//    这样应用程序就可以获得关联的
//    “格式正确的”小图标。
//
ATOM MyRegisterClass(HINSTANCE hInstance)
{
	WNDCLASSEX wcex;

	wcex.cbSize = sizeof(WNDCLASSEX);

	wcex.style			= CS_HREDRAW | CS_VREDRAW;
	wcex.lpfnWndProc	= WndProc;
	wcex.cbClsExtra		= 0;
	wcex.cbWndExtra		= 0;
	wcex.hInstance		= hInstance;
	wcex.hIcon			= LoadIcon(hInstance, MAKEINTRESOURCE(IDI_DIRECTDEMO));
	wcex.hCursor		= LoadCursor(NULL, IDC_ARROW);
	wcex.hbrBackground	= (HBRUSH)(COLOR_WINDOW+1);
	wcex.lpszMenuName	= MAKEINTRESOURCE(IDC_DIRECTDEMO);
	wcex.lpszClassName	= szWindowClass;
	wcex.hIconSm		= LoadIcon(wcex.hInstance, MAKEINTRESOURCE(IDI_SMALL));

	return RegisterClassEx(&wcex);
}

//
//   函数: InitInstance(HINSTANCE, int)
//
//   目的: 保存实例句柄并创建主窗口
//
//   注释:
//
//        在此函数中，我们在全局变量中保存实例句柄并
//        创建和显示主程序窗口。
//
BOOL InitInstance(HINSTANCE hInstance, int nCmdShow)
{
   HWND hWnd;

   hInst = hInstance; // 将实例句柄存储在全局变量中

   hWnd = CreateWindow(szWindowClass, szTitle, WS_OVERLAPPEDWINDOW,
      CW_USEDEFAULT, 0, CW_USEDEFAULT, 0, NULL, NULL, hInstance, NULL);

   if (!hWnd)
   {
      return FALSE;
   }

   ShowWindow(hWnd, nCmdShow);
   UpdateWindow(hWnd);

   return TRUE;
}

//
//  函数: WndProc(HWND, UINT, WPARAM, LPARAM)
//
//  目的: 处理主窗口的消息。
//
//  WM_COMMAND	- 处理应用程序菜单
//  WM_PAINT	- 绘制主窗口
//  WM_DESTROY	- 发送退出消息并返回
//
//
LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
{
	int wmId, wmEvent;
	PAINTSTRUCT ps;
	HDC hdc;

	switch (message)
	{
	case WM_COMMAND:
		wmId    = LOWORD(wParam);
		wmEvent = HIWORD(wParam);
		// 分析菜单选择:
		switch (wmId)
		{
		case IDM_ABOUT:
			DialogBox(hInst, MAKEINTRESOURCE(IDD_ABOUTBOX), hWnd, About);
			break;
		case IDM_EXIT:
			DestroyWindow(hWnd);
			break;
		default:
			return DefWindowProc(hWnd, message, wParam, lParam);
		}
		break;
	case WM_PAINT:
		hdc = BeginPaint(hWnd, &ps);
		// TODO: 在此添加任意绘图代码...
		EndPaint(hWnd, &ps);
		break;
	case WM_DESTROY:
		PostQuitMessage(0);
		break;
	default:
		return DefWindowProc(hWnd, message, wParam, lParam);
	}
	return 0;
}

// “关于”框的消息处理程序。
INT_PTR CALLBACK About(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)
{
	UNREFERENCED_PARAMETER(lParam);
	switch (message)
	{
	case WM_INITDIALOG:
		return (INT_PTR)TRUE;

	case WM_COMMAND:
		if (LOWORD(wParam) == IDOK || LOWORD(wParam) == IDCANCEL)
		{
			EndDialog(hDlg, LOWORD(wParam));
			return (INT_PTR)TRUE;
		}
		break;
	}
	return (INT_PTR)FALSE;
}

void Render(float fPass)
{

	gMainTime=gMainTime+fPass;
	if (gMainTime>5000)
	{
		gMainTime=0;
		//g_d3dDevice->Clear(0,0,D3DCLEAR_TARGET,0x00000000,0,0);
	}
	g_d3dDevice->BeginScene();

	g_d3dDevice->Clear(0,0,D3DCLEAR_TARGET,0x00000000,0,0);



	RenderDyTraceOfMaths(fPass);
	DrawMyVersion(800);

	g_d3dDevice->EndScene();
	g_d3dDevice->Present(0,0,0,0);
}
void RenderDyTraceOfMaths(float fPass)
{
	HRESULT Hr=gSprite->Begin(D3DXSPRITE_ALPHABLEND);

	//gSprite->Draw(gText,NULL,NULL,NULL,0xFFFFFFFF);


	if(!FAILED(Hr))
	{
		int x,y;
		//x=800*gMainTime/5000;
		//y=300+100*sinf(gMainTime/300);

		x=400+300*sinf(gMainTime/300);
		y=300+300*cosf(gMainTime/300);
		BYTE iA=100+150.0f*gMainTime/5000.0f;
		RECT R={x,y,x+100,y+100};
		char s[256]="O";
		//::sprintf(s,"%.2f",gFPS);
		DWORD dwColor=(0xFF<<24)|(iA<<16)|(iA<<8)|iA;

		//=D3DCOLOR_ARGB(0xFF,iA,iA,0x00);
		int Len=gFont->DrawTextA(
			gSprite,
			s,
			strlen(s),
			&R,
			DT_LEFT |DT_WORDBREAK |DT_CALCRECT,
			dwColor
			);
		gFont->DrawTextA(
			gSprite,
			s,
			strlen(s),
			&R,
			DT_LEFT |DT_WORDBREAK ,
			dwColor
			);
		gSprite->End();

	}
}
void	RenderMain(float fPass)
{
	
	//LPD3DXSPRITE pSprite=NULL;


	//if(FAILED(D3DXCreateSprite(g_d3dDevice,&pSprite)))
	//{
	//	return;
	//}
	//pSprite->Begin(D3DXSPRITE_ALPHABLEND)

	//	pSprite->Draw()

}
void	DrawMyVersion(int w)
{

	if (FAILED(gSprite->Begin(D3DXSPRITE_ALPHABLEND)))
	{
		return;
	}
	
	DWORD dwColor=0xFF00FF00;

	RECT R={w-100,10,w,30};
	char str[128]="3D Demo Project  ";
	int Len=gFont24->DrawTextA(
		gSprite,
		str,
		strlen(str),
		&R,
		DT_RIGHT  |DT_CALCRECT,
		dwColor
		);
	gFont24->DrawTextA(
		gSprite,
		str,
		strlen(str),
		&R,
		DT_RIGHT  ,
		dwColor
			);

	dwColor=0xFFFFFF00;
	R.top=40,R.right=800;
	strcpy(str,"作者：FHF  ");
	Len=gFont18->DrawTextA(
		gSprite,
		str,
		strlen(str),
		&R,
		DT_RIGHT  |DT_CALCRECT,
		dwColor
		);
	gFont18->DrawTextA(
		gSprite,
		str,
		strlen(str),
		&R,
		DT_RIGHT  ,
		dwColor
		);

	R.top=60,R.right=800;
	sprintf_s(str,"FPS： %.2f  ",gFPS);
	Len=gFont18->DrawTextA(
		gSprite,
		str,
		strlen(str),
		&R,
		DT_RIGHT  |DT_CALCRECT,
		dwColor
		);
	gFont18->DrawTextA(
		gSprite,
		str,
		strlen(str),
		&R,
		DT_RIGHT  ,
		dwColor
		);

	gSprite->End();
}











//class Camera
//{
//public:
//	Camera(void);
//	~Camera(void);
//public:
//	void Camera::MoveCamera_pitch(float angle);
//	void Camera::MoveCamera_yaw(float angle);
//	void Camera::MoveCamera_roll(float angle);
//	void Camera::MoveCamera_LeftRight(float fLR);
//	void Camera::MoveCamera_UpDown(float fUD);
//	void Camera::MoveCamera_ForwardBackward(float fFD);
//	void Camera::get_view_matrix(D3DXMATRIX* v);
//};


#include "StdAfx.h"
#include "Camera.h"
//
//
//Camera::Camera(void)
//{
//}
//
//Camera::~Camera(void)
//{
//}
//
////绕X轴转动， angle为旋转的角度
//void Camera::MoveCamera_pitch(float angle){
//	D3DXMATRIX transform_matrix;
//	D3DXMatrixRotationAxis(&transform_matrix, &m_vCameraRight, angle);
//	// 在调整正方向与摄像机观察方向
//	D3DXVec3TransformCoord(&m_vCameraUp,   &m_vCameraUp,   &transform_matrix);
//	D3DXVec3TransformCoord(&m_vCameraLook, &m_vCameraLook, &transform_matrix);
//}
////绕Y轴转动， angle为旋转的角度
//void Camera::MoveCamera_yaw(float angle)
//{
//	D3DXMATRIX transform_matrix;
//	// 对于陆地摄像机来说，只能绕Y轴 (0, 1, 0) 转动
//	if(m_camera_type == LAND_OBJECT)
//		D3DXMatrixRotationY(&transform_matrix, angle);
//	else	
//		// 对于自己摄像机来说，可以饶向量UP方向转动
//		D3DXMatrixRotationAxis(&transform_matrix, &m_vCameraUp, angle);
//	// 调整摄像机的右方向和观察方向
//	D3DXVec3TransformCoord(&m_vCameraRight, &m_vCameraRight, &transform_matrix);
//	D3DXVec3TransformCoord(&m_vCameraLook,  &m_vCameraLook,  &transform_matrix);
//}
////绕Z轴转动， angle为旋转的角度
//void Camera::MoveCamera_roll(float angle)
//{
//	// 只有自由摄像机能饶观察方向旋转
//	if(m_camera_type == AIR_CRAFT)
//	{
//		D3DXMATRIX transform_matrix;
//		D3DXMatrixRotationAxis(&transform_matrix, &m_vCameraLook, angle);
//		// 调整摄像机的正方向和右方向旋转
//		D3DXVec3TransformCoord(&m_vCameraUp,&m_vCameraUp,&transform_matrix);
//		D3DXVec3TransformCoord(&m_vCameraRight, &m_vCameraRight,  &transform_matrix);
//	}
//}
////----------------------------------
////设置摄像机左右平移，fLR为左右移动距离
////----------------------------------
//void Camera::MoveCamera_LeftRight(float fLR)
//{
//	//陆地摄像机
//	if(m_camera_type == LAND_OBJECT)
//		m_vCameraPos += D3DXVECTOR3(m_vCameraRight.x, 0.0f, m_vCameraRight.z) * fLR;
//	else	//自由摄像机
//		m_vCameraPos += m_vCameraRight * fLR;
//}
//
////设置摄像机上下平移，fUD为上下移动距离
//void Camera::MoveCamera_UpDown(float fUD)
//{
//	//陆地摄像机
//	if(m_camera_type == LAND_OBJECT)
//		m_vCameraPos.y += fUD;
//	else	//自由摄像机
//		m_vCameraPos += m_vCameraUp * fUD;
//}
////设置摄像机前后平移，fFD为前后移动距离
//void Camera::MoveCamera_ForwardBackward(float fFD)
//{
//	//陆地摄像机
//	if(m_camera_type == LAND_OBJECT)
//		m_vCameraPos += D3DXVECTOR3(m_vCameraLook.x, 0.0f, m_vCameraLook.z) * fFD;
//	else	//自由摄像机
//		m_vCameraPos += m_vCameraLook * fFD;
//}

// 得到视图矩阵
void Camera::get_view_matrix(D3DXMATRIX* v)
{
	// 保持摄像机的3个基本向量正交化
	D3DXVec3Normalize(&m_vCameraLook, &m_vCameraLook);
	D3DXVec3Cross(&m_vCameraUp, &m_vCameraLook, &m_vCameraRight);
	D3DXVec3Normalize(&m_vCameraUp, &m_vCameraUp);
	D3DXVec3Cross(&m_vCameraRight, &m_vCameraUp, &m_vCameraLook);
	D3DXVec3Normalize(&m_vCameraRight, &m_vCameraRight);
	// 创建视图矩阵
	float x = -D3DXVec3Dot(&m_vCameraRight, &m_vCameraPos);
	float y = -D3DXVec3Dot(&m_vCameraUp,    &m_vCameraPos);
	float z = -D3DXVec3Dot(&m_vCameraLook,  &m_vCameraPos);
	(*v)(0, 0) = m_vCameraRight.x;
	(*v)(0, 1) = m_vCameraUp.x;
	(*v)(0, 2) = m_vCameraLook.x;
	(*v)(0, 3) = 0.0f;
	(*v)(1, 0) = m_vCameraRight.y;
	(*v)(1, 1) = m_vCameraUp.y;
	(*v)(1, 2) = m_vCameraLook.y;
	(*v)(1, 3) = 0.0f;
	(*v)(2, 0) = m_vCameraRight.z;
	(*v)(2, 1) = m_vCameraUp.z;
	(*v)(2, 2) = m_vCameraLook.z;
	(*v)(2, 3) = 0.0f;
	(*v)(3, 0) = x;
	(*v)(3, 1) = y;
	(*v)(3, 2) = z;
	(*v)(3, 3) = 1.0f;
}
