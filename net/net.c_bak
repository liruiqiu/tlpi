#include "linux/base.h"
#include "net.h"
#include "message.h"
#include "connector.h"
#include "connector_pool.h"



#define THREAD_FD_FIFO_SIZE 1024
#define MAXLEN 1023

struct connector_pool g_connector_pool;

typedef struct {
    pthread_t thread_id;         /* unique ID of this thread */
    struct ev_loop *loop;     /* libev loop this thread uses */
    struct ev_async async_watcher;   /* async watcher for new connect */
    struct conn_queue *new_conn_queue; /* queue of new connections to handle */
    DECLARE_KFIFO(fifo, int, THREAD_FD_FIFO_SIZE);
    spinlock_t lock;
} WORK_THREAD;

typedef struct {
    pthread_t thread_id;         /* unique ID of this thread */
    struct ev_loop *loop;     /* libev loop this thread uses */
    struct ev_io accept_watcher;   /* accept watcher for new connect */
} DISPATCHER_THREAD;

static DISPATCHER_THREAD dispatcher_thread;

static threadpool tp;

void accept_callback(struct ev_loop *loop, ev_io *w, int revents)
{
    pr_info();
    int cfd = connector_accept(w->fd);
    WORK_THREAD *me = (WORK_THREAD *)get_thread_data(tp, 0);
    kfifo_in_locked(&me->fifo, &cfd, 1,&me->lock);
    ev_async_send(me->loop, &me->async_watcher); 
}

void recv_callback(struct ev_loop *loop, ev_io *w, int revents)
{
    pr_info();
 char buffer[1024]={0};
 int ret =0;
 //ev_io write_event;
loop:
 ret=recv(w->fd,buffer,MAXLEN,0);
 if(ret > 0)
 {
  printf("thread[%lu] recv message :%s  \n",pthread_self(),buffer);
  
 }
 else if(ret ==0)
 {
  printf("thread[%lu] remote socket closed!socket fd: %d\n",pthread_self(),w->fd);
  close(w->fd);
  ev_io_stop(loop, w);
  free(w);
  return;
 }
 else
 {
  if(errno == EAGAIN ||errno == EWOULDBLOCK)
  {
    goto loop;
  }
  else
  {
   printf("thread[%lu] ret :%d ,close socket fd : %d\n",pthread_self(),ret,w->fd);
   close(w->fd);
   ev_io_stop(loop, w);
   free(w);
   return;
  }
 }
 int fd=w->fd;
 //ev_io_stop(loop,  w);
 //ev_io_init(w,write_callback,fd,EV_WRITE);
 //ev_io_start(loop,w);
 printf("thread[%lu] socket fd : %d, turn read 2 write loop! ",pthread_self(),fd);
 
}


void write_callback(struct ev_loop *loop, ev_io *w, int revents)
{
    pr_info();
 char buffer[1024]={0};
 //ev_io read_event;
 snprintf(buffer,1023,"this is a test!");
 write(w->fd,buffer,strlen(buffer));
 int fd=w->fd;
 ev_io_stop(loop,  w);
 //ev_io_init(w,recv_callback,fd,EV_READ);
 //ev_io_start(loop,w);
} 

static void async_cb (EV_P_ ev_async *w, int revents)
{
    pr_info();
    int cfd;
    WORK_THREAD *me =  (WORK_THREAD*)(w->data);
    kfifo_out_locked(&me->fifo,&cfd,1,&me->lock);

    struct connector *pconnector = pool_get(&g_connector_pool, cfd);
    if (pconnector)
    {
        ev_io* recv_watcher=malloc(sizeof(ev_io));
        ev_io* write_watcher=malloc(sizeof(ev_io));

        pconnector->fd = cfd;

        pconnector->prev_io = recv_watcher;
        ev_io_init(recv_watcher,recv_callback,cfd, EV_READ);
        ev_io_start(me->loop,recv_watcher);

        pconnector->pwev_io = write_watcher;
        ev_io_init(write_watcher,write_callback,cfd, EV_WRITE);
        ev_io_start(me->loop,write_watcher);
    }
}

void dispatch_threadpool_fn(void *arg) {
    //int seconds = (int) arg;
    WORK_THREAD *me = (WORK_THREAD *)arg;
    //me->thread_id = pthread_self();
    ev_loop(me->loop, 0);

}

bool connector_init() {

    pool_init(&g_connector_pool, 1024, sizeof(connector_t));

    int fd = connector_create();

    struct connector *pconnector = pool_get(&g_connector_pool, fd);
    if (pconnector == NULL)
        return false;
    {
        pconnector->fd = fd;
        connector_listen(fd, "127.0.0.1", 3333);
    }

    tp = create_threadpool(3);
    int i;
    for (i=0; i<3; i++)
    {
        WORK_THREAD *me =  malloc(sizeof(WORK_THREAD));

        me->loop = ev_loop_new(0);
        if (! me->loop) {
            fprintf(stderr, "Can't allocate event base\n");
            exit(1);
        }

        pthread_spin_init(&me->lock, 0);
        INIT_KFIFO(me->fifo);

        me->async_watcher.data = me;

        /* Listen for notifications from other threads */
        ev_async_init(&me->async_watcher, async_cb);
        ev_async_start(me->loop, &me->async_watcher);

        dispatch_threadpool(tp, dispatch_threadpool_fn, (void *) me);
    }
    int listen = fd;
    dispatcher_thread.loop = ev_default_loop(0);
    dispatcher_thread.thread_id = pthread_self();
    ev_io_init(&(dispatcher_thread.accept_watcher), accept_callback,listen, EV_READ);
    ev_io_start(dispatcher_thread.loop,&(dispatcher_thread.accept_watcher)); 
    ev_loop(dispatcher_thread.loop,0);
    ev_loop_destroy(dispatcher_thread.loop);

}

bool connector_tick(uint32_t uTime)
{
    //g_ConnectorManager_Client.RunTick((void*)uTime);
    pthread_t id;
    //	pthread_create(&id, NULL, g_ConnectorManager_Client.RunTick, (void*)uTime);
}


void connector_quit() {
    destroy_threadpool( tp );
}

bool connector_acceptor(uint32_t port, const char* ip, uint32_t backlog) {
    return true;//return g_ConnectorManager_Client.Acceptor(port, ip, backlog);
}

bool connector_server(const char* ip, uint16_t port, int16_t ConnectorID) {
    return true;//return g_ConnectorManager_Client.ConnectToServer(ip, port, ConnectorID);
}

bool close_connector(int16_t ConnectorID) {
    return true;//return g_ConnectorManager_Client.RemoveConnector(g_ConnectorManager_Client.GetConnector(ConnectorID));
}

bool send_packet(int16_t ConnectorID, const char* buf, uint32_t len) {
    return true;//return g_ConnectorManager_Client.SendPacket(ConnectorID, buf, len);
}
bool ConnecterState(int16_t ConnectorID, int32_t state, const char* buf, uint32_t len) {
    printf("SendPacketSucc connID=%d,state=%d,len=%d\n", ConnectorID, state, len);
    switch( state ) {
        case ConnecterConnect:
            break;
        case ConnecterClose:
            break;
        case ConnecterSendPacket:
            break;
        case ConnecterRecievePacket:
            break;
        default:
            break;
    }
    return true;
}


int main() {
    printf("!!!Hello World!!!\n");

    connector_init();


    //ConnectToServer("172.16.2.200", 3900, ConnectorID);

    /*
       NET_MSG_HEAD head;
       memset(&head,0,NET_MSG_HEAD_SIZE);
       head.body_len =1;
       char str[10] = {0};
       str[9] = 1;
       memcpy(&str[0], &head, NET_MSG_HEAD_SIZE);

       SendPacket(ConnectorID, str, 10);

       sleep(999999);
       */
    printf("!!!end!!!\n");
    return 0;
}
